var responseObject = {};
var channels = require("channel");
var devices = require("device");
var groups = require("group");


/** SETUP ADVANCED APP REQUIRED DOMAIN IF NO DOMAIN IS SET **/
var subdomain = request.account.accountKey;
var params = {
    "apsdb.name": subdomain
}

var step = apsdb.callApi("SaveSubdomain", params, null); 
responseObject["subdomainCreation_"+subdomain] = JSON.stringify(step)


/**
	Create subscibe Channels per Group to send over data to the browser subscriber 
    Create a device used to login for every group
**/
var groupsList = ["scriptrio"];
groupsList.forEach(function(name) {
   	var step1 = groups.create(name);
   	responseObject["groupCreation_"+name] = JSON.stringify(step1);
    var subAcl = "group:".concat(name);
    var pubAcl = "group:".concat(name);
 	var params = {"name" :"responseChannel_"+name, "subscribeACL": [subAcl],"publishACL":  [pubAcl]};
	var step2 = apsdb.callApi("SaveChannel", params , null )
   	responseObject["channelCreation_"+params.name] = JSON.stringify(step2)
});


var editorGroup = "editor";
var step2 = groups.create(editorGroup);
responseObject["groupCreation_"+editorGroup] = JSON.stringify(step2);


/** Create Anonymous publish channel used to receive requests from browser **/
var channelsList =  ["requestChannel"];
var options = {
  "subscribeACL": "anonymous",
  "publishACL": "anonymous"
}

channelsList.forEach(function(channel) {
   var step = channels.create(channel, options);
   responseObject["channelCreation_"+channel] = JSON.stringify(step)
});


/** SETUP ADVANCED APP DEMO DEVICE PER GROUP  **/
var devicesList = [
    {
        "id":"demo@fe.com",
        "password" : "demo",
        "name" : "demo@fe.com",
        "groups": ["fe","editor"]
    },
    {
        "id":"demo@scriptr.io",
        "password" : "demo",
        "name" : "demo@scriptr.io",
        "groups": ["scriptrio","editor"]
    },
    {
        "id":"editor",
        "password" : "demo",
        "name" : "editor",
        "groups": ["editor"] //This is the group name required by the logged in user to have in order open the decision table
    } 
   
];

devicesList.forEach(function(params) {
   	var step= devices.save(params);
    responseObject["deviceCreation_"+params.id] = JSON.stringify(step);

    step= devices.generateToken(params.id);
    responseObject["deviceToken_"+params.id] = JSON.stringify(step);
});

//Setup the mqtt connection instance (ibm free tier)
var params = {
    'name': 'nebula20',
    'protocol': 'mqtt',
    'url':'quickstart.messaging.internetofthings.ibmcloud.com',
    'topic': 'iot-2/type/nebula/id/nebula'+request.account.accountKey+'/evt/+/fmt/json',
    'clientId': 'a:quickstart:scriptr-'+request.account.accountKey
    
}
var response = apsdb.callApi("SaveExternalEndpointConfiguration", params, null);
responseObject["createMqttExternalEndPoint"] = JSON.stringify(response);


//Link the bridge to the channel for publishing messages
//You need to activate the free trial bygoing to channels and clicking on bridges under any channel and clicking on free trial button
var params = {
    "channel": "nebulaDigest",
    "externalEndpointConfiguration":"nebula20",
    "auth_token": devices.get("nebula20").result["auth_token"]
}
var response = apsdb.callApi("AddBridge", params, null);
responseObject["AddBridge"] = JSON.stringify(response);

return responseObject;